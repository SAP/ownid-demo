apiVersion: apps/v1
kind: Deployment
metadata:
  name: ownid-client-app-deployment
  namespace: staging
  labels:
    app: ownid-client-app
spec:
  revisionHistoryLimit: 2
  replicas: 1
  selector:
    matchLabels:
      app: ownid-client-app
  template:
    metadata:
      labels:
        app: ownid-client-app
    spec:
      containers:
        - name: ownid-client-app
          image: 571861302935.dkr.ecr.us-east-2.amazonaws.com/ownid-client-app-staging:latest
          ports:
            - containerPort: 80
          env:
            - name: NETCORE3_SERVICE
              value: ownid-server-netcore3-gigya-service:5002
---
apiVersion: v1
kind: Service
metadata:
  name: ownid-client-app-service
  namespace: staging
  annotations:
    # Note that the backend talks over HTTP.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    # TODO: Fill in with the ARN of your certificate.
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:571861302935:certificate/5ba8e568-3cfa-4de6-861a-939a73533696
    # Only run SSL on the port named "https" below.
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  selector:
    app: ownid-client-app
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 443
      targetPort: 80
      name: https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ownid-client-app-2-deployment
  namespace: staging
  labels:
    app: ownid-client-app-2
spec:
  revisionHistoryLimit: 2
  replicas: 1
  selector:
    matchLabels:
      app: ownid-client-app-2
  template:
    metadata:
      labels:
        app: ownid-client-app-2
    spec:
      containers:
        - name: ownid-client-app-2
          image: 571861302935.dkr.ecr.us-east-2.amazonaws.com/ownid-client-app-staging:latest
          ports:
            - containerPort: 80
          env:
            - name: NETCORE3_SERVICE
              value: ownid-server-netcore3-gigya-2-service:5003
---
apiVersion: v1
kind: Service
metadata:
  name: ownid-client-app-2-service
  namespace: staging
  annotations:
    # Note that the backend talks over HTTP.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    # TODO: Fill in with the ARN of your certificate.
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:571861302935:certificate/5ba8e568-3cfa-4de6-861a-939a73533696
    # Only run SSL on the port named "https" below.
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  selector:
    app: ownid-client-app-2
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 443
      targetPort: 80
      name: https

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ownid-demo-app-deployment
  namespace: staging
  labels:
    app: ownid-demo-app
spec:
  revisionHistoryLimit: 2
  replicas: 1
  selector:
    matchLabels:
      app: ownid-demo-app
  template:
    metadata:
      labels:
        app: ownid-demo-app
    spec:
      containers:
        - name: ownid-demo-app
          image: 571861302935.dkr.ecr.us-east-2.amazonaws.com/ownid-demo-app-staging:latest
          ports:
            - containerPort: 80
          env:
            - name: NETCORE3_SERVICE
              value: ownid-server-netcore3-demo-gigya-service:5004
---
apiVersion: v1
kind: Service
metadata:
  name: ownid-demo-app-service
  namespace: staging
  annotations:
    # Note that the backend talks over HTTP.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    # TODO: Fill in with the ARN of your certificate.
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: 	arn:aws:acm:us-east-2:571861302935:certificate/c1f30bae-9a41-446b-8bf7-fc5f232d0e8f
    # Only run SSL on the port named "https" below.
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  selector:
    app: ownid-demo-app
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 443
      targetPort: 80
      name: https